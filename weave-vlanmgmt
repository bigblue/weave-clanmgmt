#!/bin/sh
#the very beginning of weave vlan assignment/management
set -e

#check for etcdctl in path and bomb if not
etcdctl -v >/dev/null 2>&1 || { echo >&2 "$0 requires etcdctl but it's not in our path.  Aborting."; exit 1; }

# ##FUNCTIONS## - netsted under vlan

vlan() {
  
  create_vlan() {
    etcdctl mk /weave/vlans/namemap/$1 $2 >/dev/null
    etcdctl mk /weave/vlans/namemap/$2 $1 >/dev/null
    etcdctl mkdir /weave/vlans/$2 >/dev/null
  }
  
  destroy_vlan() {
    etcdctl rm /weave/vlans/namemap/$1 >/dev/null
    etcdctl rm /weave/vlans/namemap/$2 >/dev/null
    etcdctl rm --recursive /weave/vlans/$1
  }
  
  does_ip_exist_in_vlan() {
    etcdctl ls /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/rollcall/$(hostname) 2>&1 1>/dev/null | wc -l || true
  }
  
  get_vlan_name() {
    etcdctl ls /weave/vlans/$1 2> /dev/null || true
  }
  
  does_vlan_name_exist() {
    etcdctl ls /weave/vlans/namemap/$1 2>&1 1>/dev/null | grep '100:' | wc -l || true
  }
  
  
  does_vlan_exist() {
    etcdctl ls /weave/vlans/$1 2>&1 1>/dev/null | grep '100:' | wc -l || true
  }
  
  #returns 0 if network DOESNT exist
  does_network_exist_in_vlan() {
    etcdctl ls /weave/vlans/$1/network/$2 2>&1 1>/dev/null | grep '100:' | wc -l || true
  }
  
  #woop networks
  network_address_to_ips() {
    # define empty array to hold the ip addresses
    MYIPARRAY=()
    # create array containing network address and subnet
    network=(${1//\// })
    # split network address by dot
    iparr=(${network[0]//./ })
    # check for subnet mask or create subnet mask from CIDR notation
    if [[ ${network[1]} =~ '.' ]]; then
      netmaskarr=(${network[1]//./ })
    else
      if [[ $((8-${network[1]})) > 0 ]]; then
        netmaskarr=($((256-2**(8-${network[1]}))) 0 0 0)
        elif  [[ $((16-${network[1]})) > 0 ]]; then
        netmaskarr=(255 $((256-2**(16-${network[1]}))) 0 0)
        elif  [[ $((24-${network[1]})) > 0 ]]; then
        netmaskarr=(255 255 $((256-2**(24-${network[1]}))) 0)
        elif [[ $((32-${network[1]})) > 0 ]]; then
        netmaskarr=(255 255 255 $((256-2**(32-${network[1]}))))
      fi
    fi
    # correct wrong subnet masks (e.g. 240.192.255.0 to 255.255.255.0)
    [[ ${netmaskarr[2]} == 255 ]] && netmaskarr[1]=255
    [[ ${netmaskarr[1]} == 255 ]] && netmaskarr[0]=255
    # generate list of ip addresses
    for i in $(seq 0 $((255-${netmaskarr[0]}))); do
      for j in $(seq 0 $((255-${netmaskarr[1]}))); do
        for k in $(seq 0 $((255-${netmaskarr[2]}))); do
          for l in $(seq 1 $((255-${netmaskarr[3]}))); do
            MYIPARRAY+=( $(( $i+$(( ${iparr[0]}  & ${netmaskarr[0]})) ))"."$(( $j+$(( ${iparr[1]} & ${netmaskarr[1]})) ))"."$(($k+$(( ${iparr[2]} & ${netmaskarr[2]})) ))"."$(($l+$((${iparr[3]} & ${netmaskarr[3]})) )) )
          done
        done
      done
    done
  }
  #generate a netmask from a given cidr notation
  cidr2mask() {
    local i mask=""
    local full_octets=$(($1/8))
    local partial_octet=$(($1%8))
    
    for ((i=0;i<4;i+=1)); do
      if [ $i -lt $full_octets ]; then
        mask+=255
        elif [ $i -eq $full_octets ]; then
        mask+=$((256 - 2**(8-$partial_octet)))
      else
        mask+=0
      fi
      test $i -lt 3 && mask+=.
    done
    
    echo $mask
  }
  #generate cidr notation from a given netmask
  mask2cidr() {
    nbits=0
    IFS=.
    for dec in $1 ; do
      case $dec in
        255) let nbits+=8;;
        254) let nbits+=7;;
        252) let nbits+=6;;
        248) let nbits+=5;;
        240) let nbits+=4;;
        224) let nbits+=3;;
        192) let nbits+=2;;
        128) let nbits+=1;;
        0);;
        *) echo "Error: $dec is not recognised"; exit 1
      esac
    done
    echo "$nbits"
  }
  
  # ##MAIN##
  
  case "$1" in
    attach)
      #get the vlan num
      TARGETVLAN=$(etcdctl get /weave/vlans/namemap/$2)
      #grab the network particulars
      TARGETNETWORK=$(etcdctl ls /weave/vlans/${TARGETVLAN}/network | awk -F\/ '{print $6}')
      TARGETNETMASK=$(etcdctl get /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/netmask)
      #see if we already have been assigned an ip in this vlan
      #does_ip_exist_in_vlan
      IHAZIP=$(does_ip_exist_in_vlan)
      if [ "$IHAZIP" == 0 ] ; then
        echo "You already have an ip on the $2 weave VLAN!"
        exit 1
      fi
      TARGETIP=$(etcdctl ls /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/ip-pool/available | head -1 | awk -F\/ '{print $9}')
      if [ -z "$TARGETIP" ] ; then
        echo "NO AVAILABLE IP's in the $2 vlan!"
        exit 1
      fi
      #snatch the ip
      etcdctl rm /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/ip-pool/available/${TARGETIP} 2>/dev/null
      etcdctl mk /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/ip-pool/assigned/${TARGETIP} $(hostname) 2>/dev/null
      etcdctl mk /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/rollcall/$(hostname) ${TARGETIP} 2>/dev/null
      /opt/bin/weave expose ${TARGETIP}/${TARGETNETMASK}
    ;;
    detach)
      #get the vlan num
      TARGETVLAN=$(etcdctl get /weave/vlans/namemap/$2)
      #figure out which IP we have
      TARGETNETWORK=$(etcdctl ls /weave/vlans/${TARGETVLAN}/network | awk -F\/ '{print $6}')
      TARGETNETMASK=$(etcdctl get /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/netmask)
      IHAZIP=$(does_ip_exist_in_vlan)
      if [ "$IHAZIP" == 1 ] ; then
        echo "You are not currently connected to the $2 weave VLAN!"
        exit 1
      fi
      #release it
      MYIP=$(etcdctl get /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/rollcall/$(hostname))
      /opt/bin/weave hide ${MYIP}/${TARGETNETMASK}
      etcdctl rm /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/ip-pool/assigned/${MYIP} 2>/dev/null
      etcdctl rm /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/rollcall/$(hostname) 2>/dev/null
      #back to the pool
      etcdctl mk /weave/vlans/${TARGETVLAN}/network/${TARGETNETWORK}/ip-pool/available/${MYIP} avail 2>/dev/null
    ;;
    create)
      shift 1
      echo "I am the create case"
      case $1 in
        vlan)
          echo "I am the vlan switch under create"
          echo "My args are $* and I am passing $2 to does_vlan_exist"
          VLANEXIST=$(does_vlan_exist $2)
          if [ "$VLANEXIST" == 0 ] ; then
            echo "Sorry - a vlan numbered $2 already exists!"
            exit 1
          else
            echo "Passed validation - moving along"
          fi
          echo "Getting ready to run vnexist - my args are $*"
          echo "I am passing $3 to vnexist"
          echo "Running vnexist against $3"
          VNEXIST=$(does_vlan_name_exist $3)
          if [ $VNEXIST == 0 ] ; then
            echo "Sorry - a vlan named $3 already exists!"
            exit 1
          fi
          echo "I am the create_vlan entry - and I am passing $3 $2 to the function"
          create_vlan $3 $2
        ;;
        network)
          shift 1
          echo "I am the create network case switch"
          echo "I have $# arguments which are $*"
          if [ "$#" -ne 2 ]; then
            echo "You need 2 params - block in cidr notation and target vlan"
            exit 1
          fi
          ADDRESSBLOCK=$(echo $1 | awk -F\/ '{print $1}')
          CURRCIDR=$(echo $1 | awk -F\/ '{print $2}')
          if [ $CURRCIDR != 24 ] ; then
            echo "Sorry only supporting /24 blocks right now!"
            exit 1
          fi
          echo "Checking if the vlan exists...."
          echo "My args are: $*"
          echo "I am passing $2 to does_vlan_exist"
          VLANEXIST=$(does_vlan_exist $2)
          if [ $VLANEXIST == 1  ] ; then
            echo "Sorry - vlan $3 doesnt exist!"
            exit 1
          fi
          echo "Checking if network exists in target vlan..."
          echo "My args are: $*"
          echo "I am passing $2 $1 to does_network_exist_in_vlan"
          NETWORKEXIST=$(does_network_exist_in_vlan $2 $ADDRESSBLOCK)
          echo "value of NETWORKEXIST is $NETWORKEXIST"
          if [ $NETWORKEXIST ==  0 ] ; then
            echo "Sorry - network $1 already exists in vlan $2"
            exit 1
          fi
          echo "I am doing the stuffs"
          echo "Calcumalating...."
          network_address_to_ips $1
          ADDRESSBLOCK=$(echo $1 | awk -F\/ '{print $1}')
          CURRCIDR=$(echo $1 | awk -F \/ '{print $2}')
          NETMASK=$(cidr2mask $CURRCIDR)
          TARGETVLAN=$(get_vlan_name $2)
          echo "Target VLAN: $2"
          echo "Addressblock=$ADDRESSBLOCK"
          echo "Netmask=$NETMASK"
          echo "Creating network..."
          etcdctl mkdir /weave/vlans/$2/network/$ADDRESSBLOCK
          etcdctl mkdir /weave/vlans/$2/network/$ADDRESSBLOCK/ip-pool
          etcdctl mkdir /weave/vlans/$2/network/$ADDRESSBLOCK/ip-pool/available
          etcdctl mkdir /weave/vlans/$2/network/$ADDRESSBLOCK/ip-pool/assigned
          etcdctl mkdir /weave/vlans/$2/network/$ADDRESSBLOCK/ip-pool/rollcall
          etcdctl mk /weave/vlans/$2/network/$ADDRESSBLOCK/netmask $CURRCIDR
          for i in ${MYIPARRAY[*]} ; do
            etcdctl mk /weave/vlans/$2/network/$ADDRESSBLOCK/ip-pool/available/$i avail
          done
        ;;
        *)
          echo "Invalid selection"
        ;;
      esac
    ;;
    destroy)
      shift 1
      case $1 in
        vlan)
          echo "I am destroy vlan and here are my args"
          echo "$*"
          VLANEXIST=$(does_vlan_exist $2)
          if [ $VLANEXIST == 0  ] ; then
            echo "Sorry - vlan $3 doesnt exist!"
            exit 1
          else
            echo "Passed validation - moving along"
            TARGETNAME=$(etcdctl get /weave/vlans/namemap/$2)
            destroy_vlan $2 $TARGETNAME
          fi
        ;;
	network)
	echo "I am the destroy network switch and here are my args"
	echo "$*"
	;;
        *)
          echo "Invalid selection"
        ;;
      esac
    ;;
    status)
      IHAZSTUFF=$(etcdctl ls /weave/vlans --recursive|grep rollcall| grep $(hostname) | awk -F\/ '{print $8}')
      if [ -z "$IHAZSTUFF" ] ; then
        echo "This host is not currently attached to any weave vlans..."
      else
        echo "Status:"
        etcdctl ls /weave/vlans --recursive|grep rollcall| grep $(hostname)
      fi
    ;;
    *)
      echo "Invalid argument"
    ;;
  esac
}
vlan $*
